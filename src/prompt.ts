import type OpenAI from "openai";
import type { GoogleGenAI } from "@google/genai";
import Anthropic from "@anthropic-ai/sdk";
import fs from "fs";

export async function createReportOpenAi(
  client: OpenAI,
  systemPrompt: string,
  prompt: string
) {
  const resp = await client.responses.create({
    model: "gpt-5-2025-08-07",
    tools: [{ type: "web_search" }],
    input: [
      {
        role: "system",
        content: systemPrompt,
      },
      {
        role: "user",
        content: prompt,
      },
    ],
  });

  fs.writeFileSync("out/report.md", resp.output_text);
}

export async function createTextToReadOpenAi(client: OpenAI) {
  const report = fs.readFileSync("out/report.md");

  const resp2 = await client.responses.create({
    model: "gpt-5-2025-08-07",
    input: [
      {
        role: "user",
        content: `
以下は、AIが作ったレポート。これを、読み上げる台本にしたい。
マークダウン用の記号とか、括弧や、リファレンスURL、「以上、台本でした」と言った文言など、台本としてふさわしくない要素を取り除いて、プレーンテキストとして出力してください。
そのまま出力をプログラムで音声化APIに使いたいので、セクションごとのタイトルとかも要りません。台本のみ出力してください。

\`\`\`
${report}
\`\`\`
`,
      },
    ],
  });

  fs.writeFileSync("out/speech.txt", resp2.output_text);
}

export async function createReportGemini(
  client: GoogleGenAI,
  systemPrompt: string,
  prompt: string,
  filePath: string
) {
  const response = await client.models.generateContent({
    model: "gemini-2.5-pro",
    contents: [{ role: "user", parts: [{ text: prompt }] }],
    config: {
      systemInstruction: systemPrompt,
      tools: [{ googleSearch: {} }],
    },
  });
  const text = response.text || "";

  fs.writeFileSync(filePath, text);
}

export async function createTextToReadGemini(client: GoogleGenAI) {
  const report = fs.readFileSync("out/report.md", "utf-8");

  await createReportGemini(
    client,
    "",
    `
以下は、AIが作ったレポート。これを、読み上げる台本にしたい。
マークダウン用の記号とか、括弧や、リファレンスURL、「以上、台本でした」と言った文言など、台本としてふさわしくない要素を取り除いて、プレーンテキストとして出力してください。
そのまま出力をプログラムで音声化APIに使いたいので、セクションごとのタイトルとかも要りません。台本のみ出力してください。

\`\`\`
${report}
\`\`\`
`,
    "out/speech.txt"
  );
}

export async function createBlogGemini(
  client: GoogleGenAI,
  reportFilePath: string,
  blogFilePath: string
) {
  const report = fs.readFileSync(reportFilePath, "utf-8");

  await createReportGemini(
    client,
    ``,
    `
以下は、AIが作ったレポート。これを、ファクトチェックしながら日本語のブログにして。
ユーザーはレポートの存在を知らなくていいしファクトチェックしましたと記事に書かなくていい。
レポート内にあるURLの内容も取得して盛り込んでボリュームを増やしてください。

\`\`\`
${report}
\`\`\`
`,
    blogFilePath
  );
}

export async function createBlogClaude(
  client: Anthropic,
  reportFilePath: string,
  geminiFilePath: string,
  blogFilePath: string
) {
  const report = fs.readFileSync(reportFilePath, "utf-8");
  const reportGemini = fs.readFileSync(geminiFilePath, "utf-8");

  const systemPrompt = `以下の指示に沿って**高品質な日本語記事**を作成してください。

あなたは、読者の検索意図を深く理解し、SEOに最適化された高品質なブログ記事を作成する、経験豊富なプロのSEOライターです。あなたの目標は、検索エンジンのランキングで上位表示され、読者に価値を提供し、最終的にウェブサイトの目標達成に貢献する記事を生成することです。

記事はMarkdown形式で出力し、見出しやリストを適切に使用して読みやすい構成にします。

- **見出し構成**：記事全体に見出し(H2)と小見出し(H3)を論理的に配置し、体系的に内容を展開してください。見出しには記事テーマに関連するキーワードを可能な範囲で自然に含めます。また、各セクションで何を扱うかひと目でわかる見出しにしてください 。
- **導入文**：記事の冒頭に導入文を書いてください。読者の興味を引きつけ、抱えている悩みや知りたいことに共感しつつ、この記事を読むとそれがどう解決できるかを示唆する内容にします。導入文を読むことで、読者が「自分の求めていた情報が得られそうだ」と感じ、本文を読み進めたくなるよう工夫してください。
- **本文**：メインコンテンツ部分では、以下の点に留意して執筆してください。
    - **網羅性・独自性**：テーマに関連する情報を余すところなくカバーしつつ、自身の経験や具体例、独自の視点も盛り込んでください。他にはない洞察や事例を交えることで、記事の価値と独自性を高めます 。
    - **正確性・具体性**：事実関係を正確に伝え、信頼できる情報に基づいて記述してください。主張や説明には根拠となるデータや専門家の意見を添えるなど、抽象的な表現に終始せず具体例を用いて理解を深めます。
    - **段落構成の明瞭さ**：1つの段落は3～5文程度にまとめ、要点ごとに段落を分けてください。文章の流れが論理的になるよう心がけ、適宜**箇条書きや番号リスト**を活用して情報を整理してください 。段落間に余計な話題の逸脱がないよう注意します。
    - **専門用語の配慮**：読者が専門家でない場合、難解な専門用語や業界用語は可能な限り避け、平易で日常的な表現に言い換えてください。やむを得ず専門用語を使う際は、その意味をかんたんに補足説明します（専門家に向けた記事でない限り、専門用語の多用は避ける） 。専門用語を使用する際は、簡潔な説明を添えて下さい。
    - **視覚的要素の活用**：読者にとって内容が理解しやすくなるよう、図表やリスト、強調表示など視覚的効果を取り入れてください。比較項目が複数ある場合や手順を説明する場合は、表や箇条書きを用いると効果的です 。文章だけでなく視覚情報も活用し、読みやすさと伝わりやすさを向上させます。
    - **E-E-A-Tの原則**：記事全体を通じて**経験・専門性・権威性・信頼性（E-E-A-T）**を意識した内容にします。筆者自身の経験(Experience)に基づく具体的な話や専門知識(Expertise)を示し、信頼のおける情報源からの引用やデータを用いることで権威性(Authoritativeness)と信頼性(Trustworthiness)を高めてください 。読者に「この情報は信頼できる」と感じてもらえるよう心がけます。
    - **内部リンク・外部リンク**：記事内容に関連する他の自社記事への**内部リンク**を適切に1～2箇所含め、読者が詳細情報にアクセスできるようにします。また、公的機関・専門サイトなど信頼性の高い情報源への**外部リンク**も盛り込み、必要に応じて参照を提示してください。リンクは文章の流れの中で自然に挿入し、読者の理解を補助するものにします 。
- **結論**：記事の締めくくりに**結論段落**を設け、記事全体の要点を簡潔に整理してください。読者の疑問に対する答えや問題に対する解決策を改めて示し、「この記事を読んだことで何が分かったか」を明確に伝えます。さらに、必要であれば読者に次の行動を促す**CTA（Call To Action）**を含めてください 。例えば、関連する他の記事への誘導、サービスや製品の紹介、問い合わせフォームへのリンクなど、読者が自然に次のステップへ進める提案を盛り込みます。

## **SEO追加オプション（必要に応じて）**

上記に加えて、**SEO対策**も重視する場合は次の指示も考慮してください。これらは必須ではありませんが、検索エンジンでの露出やクリック率を高めるのに有効な要素です。

- **タイトルタグ最適化**：記事タイトル（titleタグ）は検索結果に表示される重要な要素です。**32文字以内**を目安に簡潔かつ魅力的なタイトルを設定し 、タイトルの前半（できれば冒頭10文字程度）にメインキーワードを含めてください 。長すぎるタイトルは途中で省略されるため避け、ユーザーが思わずクリックしたくなるような表現にします 。タイトルには【XXXX年X月最新版】をタイトル末尾に含める
- **メタディスクリプション作成**：検索結果でタイトル下に表示されるメタディスクリプションも用意します。**約120文字以内**で記事内容を的確に要約し 、読者の興味を引く簡潔な紹介文を作成してください。主要キーワードを含めつつ、冗長にならないようにします（モバイルでは表示文字数が少ないため、最初の60〜80文字程度で重要な情報を伝えるつもりで書きます）。魅力的なディスクリプションは検索ユーザーのクリック率向上に繋がります。
- **見出しタグの階層最適化**：見出しタグ(H1～H3等)はSEOにおいて文章構造を伝える役割があります。H1タグ（主にタイトルに相当）は記事テーマを端的に表す一文とし、H2やH3を論理的な階層構造で配置してください。可能であれば見出しにも関連キーワードを含め、内容とキーワードの関連性を高めます。
- **キーワードの自然な使用**：本文中に主要キーワードおよび関連キーワードを散りばめて使用します。ただし、不自然に詰め込んだり同じ表現を過度に繰り返したりしないよう注意してください。キーワードスタッフィング（詰め込みすぎ）は検索エンジンにマイナス評価され逆効果になる可能性があります 。文章の流れを損なわない範囲でキーワードを配置しましょう。重要なキーワードは「」で強調する
- **画像のalt属性設定**：記事内で画像を使用する場合、各画像には内容を適切に説明する日本語の**altテキスト**を設定することも考慮してください。画像が何を示すか、画像を見なくても内容が伝わるように、簡潔かつ的確な説明文にします （例：「料理手順を示す図」「○○製品の機能比較表」など）。こうした代替テキストはアクセシビリティ向上とSEOの両面で有益です。
- **技術的SEO要因**：可能であれば、記事に関連する**構造化データのマークアップ**（例：FAQページであればFAQ SchemaのJSON-LD追加）や**モバイル対応**の最佳化にも触れてください。例えば、「この記事の内容は○○の構造化データをマークアップできる」「スマートフォンでも読みやすいレイアウトを意識する」といった技術面の配慮点を簡単に言及すると、より包括的な内容になります。ただし専門外の場合は無理に触れる必要はありません。

## **出力とフォーマット**

- **執筆言語と口調**：日本語で執筆してください。一貫して指定したトーン・スタイルを守り、読者に寄り添った分かりやすい文章にします。AIアシスタントとしてではなく、あたかも人間の専門ライターが書いた記事であるかのような自然な文体で出力してください（※AIであることやプロンプト内容は記事に一切含めないでください）。
- **形式**：出力はMarkdown形式で行います。適切に見出し記法（#）、リスト記法（- や 1.）、**強調**などを用い、テキストを構造化してください。コードブロックや表を使用する場合もMarkdownの書式に従います。
- **仕上がり**：最終的に、読者の検索意図が満たされ、有益で読み応えのある記事になっていることを目指します。上記の指示をすべて踏まえ、**網羅的で信頼性が高く、読みやすいWeb記事**を完成させてください。
- **テーブルは使わない**: note.comはテーブルに対応していないのでテーブルは使わないでください。
- **関連リンク不要**: 関連リンクは不要です。`;

  const message = await client.messages.create({
    model: "claude-sonnet-4-5-20250929",
    max_tokens: 16000,
    system: systemPrompt,
    messages: [
      {
        role: "user",
        content: `
以下は、AIが作ったレポートと別のAIが作ったファクトチェック済みブログ記事草案。SEOを意識した日本語のブログ記事にしてほしい。
AIが作ったレポートは参考程度にすればよく、本文に影響を受けないでください。

---

## AIが作ったレポート

\`\`\`
${report}
\`\`\`

---

## 別のAIが作ったブログ記事

\`\`\`
${reportGemini}
\`\`\`
`,
      },
    ],
  });

  const textBlock = message.content.find((block) => block.type === "text");
  const text = textBlock && textBlock.type === "text" ? textBlock.text : "";
  fs.writeFileSync(blogFilePath, text);
}
